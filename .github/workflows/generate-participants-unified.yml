name: Generate Participants

permissions:
  contents: write

on:
  # Scheduled nightly at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Manual triggering with flexible environment options
  workflow_dispatch:
    inputs:
      environments:
        description: 'Environments to generate (single: PROD/UAT/DEV, multiple: PROD,UAT,DEV, or "all")'
        required: true
        default: 'all'
        type: string
  
  # Webhook trigger from participant repositories
  repository_dispatch:
    types: [participant-update]

jobs:
  generate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install pandas urllib3 requests cryptography
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Validate webhook source
      if: github.event_name == 'repository_dispatch'
      id: validate
      run: |
        # Security: Validate webhook source repository
        SOURCE_REPO="${{ github.event.client_payload.source_repository }}"
        
        # List of allowed repositories
        ALLOWED_REPOS=(
          "WorldHealthOrganization/tng-participants-prod"
          "WorldHealthOrganization/tng-participants-uat" 
          "WorldHealthOrganization/tng-participants-dev"
        )
        
        # Check if source repository is in allowed list
        REPO_ALLOWED=false
        for allowed_repo in "${ALLOWED_REPOS[@]}"; do
          if [ "$SOURCE_REPO" = "$allowed_repo" ]; then
            REPO_ALLOWED=true
            break
          fi
        done
        
        if [ "$REPO_ALLOWED" = "false" ]; then
          echo "ERROR: Webhook rejected - repository '$SOURCE_REPO' is not in allowed list"
          echo "Allowed repositories: ${ALLOWED_REPOS[*]}"
          exit 1
        fi
        
        # Validate organization
        ORG=$(echo "$SOURCE_REPO" | cut -d'/' -f1)
        if [ "$ORG" != "WorldHealthOrganization" ]; then
          echo "ERROR: Webhook rejected - organization '$ORG' is not 'WorldHealthOrganization'"
          exit 1
        fi
        
        echo "Webhook source validated: $SOURCE_REPO"
        echo "source_repo=$SOURCE_REPO" >> $GITHUB_OUTPUT
        
    - name: Determine environments to process
      id: environments
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          # Extract environment from repository name (part after last dash)
          SOURCE_REPO="${{ steps.validate.outputs.source_repo }}"
          ENV_SUFFIX=$(echo "$SOURCE_REPO" | sed 's/.*-//')
          ENV=$(echo "$ENV_SUFFIX" | tr '[:lower:]' '[:upper:]')
          echo "envs=$ENV" >> $GITHUB_OUTPUT
          echo "Using environment from webhook: $ENV"
        elif [ "${{ github.event_name }}" = "schedule" ]; then
          # Nightly build processes all environments
          echo "envs=PROD,UAT,DEV" >> $GITHUB_OUTPUT
          echo "Using all environments for scheduled run"
        else
          # Manual workflow_dispatch
          INPUT="${{ github.event.inputs.environments }}"
          if [ -z "$INPUT" ] || [ "$INPUT" = "all" ]; then
            echo "envs=PROD,UAT,DEV" >> $GITHUB_OUTPUT
            echo "Using all environments for manual run"
          else
            echo "envs=$INPUT" >> $GITHUB_OUTPUT
            echo "Using specified environments: $INPUT"
          fi
        fi
        
    - name: Generate participants
      run: |
        ENVIRONMENTS="${{ steps.environments.outputs.envs }}"
        IFS=',' read -ra ENV_ARRAY <<< "$ENVIRONMENTS"
        
        OVERALL_CHANGES=false
        COMMIT_COUNT=0
        
        for ENV in "${ENV_ARRAY[@]}"; do
          ENV=$(echo "$ENV" | tr '[:lower:]' '[:upper:]' | xargs) # Trim whitespace and uppercase
          echo "Processing environment: $ENV"
          
          # Generate for this environment
          python3 input/scripts/generate_organizations.py --env "$ENV" --source github-api
          
          # Check if there are any changes for this environment
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected for $ENV environment"
            
            # Stage the changes
            git add input/fsh/instances/ input/fsh/codesystems/ input/fsh/valuesets/
            
            # Check if there are staged changes (substantive changes, not just whitespace)
            if [ -n "$(git diff --cached --name-only)" ]; then
              # Determine commit message based on trigger type
              if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
                COMMIT_MSG="Auto-update $ENV participants from repository changes"
              elif [ "${{ github.event_name }}" = "schedule" ]; then
                COMMIT_MSG="Auto-update $ENV participants from nightly generation ($(date -u +%Y-%m-%d))"
              else
                COMMIT_MSG="Auto-update $ENV participants from manual generation"
              fi
              
              # Commit the changes for this environment
              git commit -m "$COMMIT_MSG"
              OVERALL_CHANGES=true
              COMMIT_COUNT=$((COMMIT_COUNT + 1))
              echo "Committed changes for $ENV environment"
            else
              echo "No substantive changes for $ENV environment after staging"
              git reset --hard HEAD  # Reset any unstaged changes
            fi
          else
            echo "No changes detected for $ENV environment"
          fi
        done
        
        # Push all commits if any changes were made
        if [ "$OVERALL_CHANGES" = "true" ]; then
          git push
          echo "Pushed $COMMIT_COUNT environment update(s)"
        else
          echo "No changes to push"
        fi
        
    - name: Summary
      run: |
        echo "Participant generation completed"
        echo "Trigger: ${{ github.event_name }}"
        echo "Processed environments: ${{ steps.environments.outputs.envs }}"
        git log --oneline -5